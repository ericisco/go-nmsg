// Code generated by protoc-gen-go.
// source: dns.proto
// DO NOT EDIT!

/*
Package nmsg_base is a generated protocol buffer package.

It is generated from these files:
	dns.proto
	dnsqr.proto
	email.proto
	encode.proto
	http.proto
	ipconn.proto
	linkpair.proto
	logline.proto
	ncap.proto
	packet.proto
	pkt.proto
	xml.proto

It has these top-level messages:
	Dns
	DnsQR
	Email
	Encode
	Http
	IPConn
	Linkpair
	LogLine
	Ncap
	Packet
	Pkt
	Xml
*/
package nmsg_base

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Dns struct {
	Section          *uint32  `protobuf:"varint,6,opt,name=section" json:"section,omitempty"`
	Qname            []byte   `protobuf:"bytes,7,opt,name=qname" json:"qname,omitempty"`
	Qtype            *uint32  `protobuf:"varint,8,opt,name=qtype" json:"qtype,omitempty"`
	Qclass           *uint32  `protobuf:"varint,9,opt,name=qclass" json:"qclass,omitempty"`
	Rrname           []byte   `protobuf:"bytes,1,opt,name=rrname" json:"rrname,omitempty"`
	Rrtype           *uint32  `protobuf:"varint,2,opt,name=rrtype" json:"rrtype,omitempty"`
	Rrclass          *uint32  `protobuf:"varint,3,opt,name=rrclass" json:"rrclass,omitempty"`
	Rrttl            *uint32  `protobuf:"varint,4,opt,name=rrttl" json:"rrttl,omitempty"`
	Rdata            [][]byte `protobuf:"bytes,5,rep,name=rdata" json:"rdata,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Dns) Reset()                    { *m = Dns{} }
func (m *Dns) String() string            { return proto.CompactTextString(m) }
func (*Dns) ProtoMessage()               {}
func (*Dns) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Dns) GetSection() uint32 {
	if m != nil && m.Section != nil {
		return *m.Section
	}
	return 0
}

func (m *Dns) GetQname() []byte {
	if m != nil {
		return m.Qname
	}
	return nil
}

func (m *Dns) GetQtype() uint32 {
	if m != nil && m.Qtype != nil {
		return *m.Qtype
	}
	return 0
}

func (m *Dns) GetQclass() uint32 {
	if m != nil && m.Qclass != nil {
		return *m.Qclass
	}
	return 0
}

func (m *Dns) GetRrname() []byte {
	if m != nil {
		return m.Rrname
	}
	return nil
}

func (m *Dns) GetRrtype() uint32 {
	if m != nil && m.Rrtype != nil {
		return *m.Rrtype
	}
	return 0
}

func (m *Dns) GetRrclass() uint32 {
	if m != nil && m.Rrclass != nil {
		return *m.Rrclass
	}
	return 0
}

func (m *Dns) GetRrttl() uint32 {
	if m != nil && m.Rrttl != nil {
		return *m.Rrttl
	}
	return 0
}

func (m *Dns) GetRdata() [][]byte {
	if m != nil {
		return m.Rdata
	}
	return nil
}

func init() {
	proto.RegisterType((*Dns)(nil), "nmsg.base.Dns")
}

func init() { proto.RegisterFile("dns.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 148 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x4c, 0xc9, 0x2b, 0xd6,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0xcc, 0xcb, 0x2d, 0x4e, 0xd7, 0x4b, 0x4a, 0x2c, 0x4e,
	0x55, 0x9a, 0xcc, 0xc8, 0xc5, 0xec, 0x92, 0x57, 0x2c, 0xc4, 0xcf, 0xc5, 0x5e, 0x9c, 0x9a, 0x5c,
	0x92, 0x99, 0x9f, 0x27, 0xc1, 0xa6, 0xc0, 0xa8, 0xc1, 0x2b, 0xc4, 0xcb, 0xc5, 0x5a, 0x98, 0x97,
	0x98, 0x9b, 0x2a, 0xc1, 0x0e, 0xe4, 0xf2, 0x80, 0xb9, 0x25, 0x95, 0x05, 0xa9, 0x12, 0x1c, 0x60,
	0x59, 0x3e, 0x2e, 0xb6, 0xc2, 0xe4, 0x9c, 0xc4, 0xe2, 0x62, 0x09, 0x4e, 0x18, 0xbf, 0xa8, 0x08,
	0xac, 0x9c, 0x11, 0xac, 0x1c, 0xcc, 0x07, 0xab, 0x67, 0x02, 0xcb, 0x03, 0x8d, 0x2f, 0x2a, 0x82,
	0x68, 0x60, 0x86, 0x19, 0x0f, 0x54, 0x50, 0x92, 0x23, 0xc1, 0x02, 0xe7, 0xa6, 0x24, 0x96, 0x24,
	0x4a, 0xb0, 0x2a, 0x30, 0x6b, 0xf0, 0x00, 0x02, 0x00, 0x00, 0xff, 0xff, 0x75, 0x4a, 0x12, 0x4c,
	0xac, 0x00, 0x00, 0x00,
}
