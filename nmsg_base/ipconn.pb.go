// Code generated by protoc-gen-go.
// source: ipconn.proto
// DO NOT EDIT!

package nmsg_base

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type IPConn struct {
	Proto            *uint32 `protobuf:"varint,1,opt,name=proto" json:"proto,omitempty"`
	Srcip            []byte  `protobuf:"bytes,2,opt,name=srcip" json:"srcip,omitempty"`
	Srcport          *uint32 `protobuf:"varint,3,opt,name=srcport" json:"srcport,omitempty"`
	Dstip            []byte  `protobuf:"bytes,4,opt,name=dstip" json:"dstip,omitempty"`
	Dstport          *uint32 `protobuf:"varint,5,opt,name=dstport" json:"dstport,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *IPConn) Reset()                    { *m = IPConn{} }
func (m *IPConn) String() string            { return proto.CompactTextString(m) }
func (*IPConn) ProtoMessage()               {}
func (*IPConn) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *IPConn) GetProto() uint32 {
	if m != nil && m.Proto != nil {
		return *m.Proto
	}
	return 0
}

func (m *IPConn) GetSrcip() []byte {
	if m != nil {
		return m.Srcip
	}
	return nil
}

func (m *IPConn) GetSrcport() uint32 {
	if m != nil && m.Srcport != nil {
		return *m.Srcport
	}
	return 0
}

func (m *IPConn) GetDstip() []byte {
	if m != nil {
		return m.Dstip
	}
	return nil
}

func (m *IPConn) GetDstport() uint32 {
	if m != nil && m.Dstport != nil {
		return *m.Dstport
	}
	return 0
}

func init() {
	proto.RegisterType((*IPConn)(nil), "nmsg.base.IPConn")
}

func init() { proto.RegisterFile("ipconn.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 109 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0xc9, 0x2c, 0x48, 0xce,
	0xcf, 0xcb, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0xcc, 0xcb, 0x2d, 0x4e, 0xd7, 0x4b,
	0x4a, 0x2c, 0x4e, 0x55, 0x0a, 0xe7, 0x62, 0xf3, 0x0c, 0x70, 0x06, 0x4a, 0x09, 0xf1, 0x72, 0xb1,
	0x82, 0x65, 0x25, 0x18, 0x15, 0x18, 0x35, 0x78, 0x41, 0xdc, 0xe2, 0xa2, 0xe4, 0xcc, 0x02, 0x09,
	0x26, 0x20, 0x97, 0x47, 0x88, 0x9f, 0x8b, 0x1d, 0xc8, 0x2d, 0xc8, 0x2f, 0x2a, 0x91, 0x60, 0x86,
	0xc9, 0xa7, 0x14, 0x97, 0x00, 0xe5, 0x59, 0x60, 0xf2, 0x40, 0x2e, 0x58, 0x9e, 0x15, 0x24, 0x0f,
	0x08, 0x00, 0x00, 0xff, 0xff, 0x83, 0x37, 0xd2, 0x7d, 0x72, 0x00, 0x00, 0x00,
}
